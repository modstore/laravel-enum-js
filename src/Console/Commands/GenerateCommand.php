<?php

namespace Modstore\LaravelEnumJs\Console\Commands;

use Exception;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Storage;

class GenerateCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'enum-js:generate';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Generate javascript files from your php enum files.';

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        // Delete any existing generated files.
        $files = Storage::disk(config('laravel-enum-js.output_disk'))->allFiles();

        // Just to ensure this isn't accidentally the wrong directly with non-js files.
        $nonJsFiles = collect($files)->filter(function ($filename) {
            return preg_match('/\.js$/', $filename) !== 1;
        });

        if ($nonJsFiles->count() > 0) {
            throw new \Exception('Js enums directory contains non-js files, please check your config.');
        }

        Storage::disk(config('laravel-enum-js.output_disk'))->delete($files);

        $pattern = '/' . collect(config('laravel-enum-js.namespaces'))->map(function ($item) {
            return str_replace('\\*', '.+', preg_quote($item));
        })->implode('|') . '/';

        $classLoader = require('vendor/autoload.php');
        $classes = array_unique(array_merge(get_declared_classes(), array_keys($classLoader->getClassMap())));
        $classesToWrite = [];
        // Create a js file for any class that matches the specified pattern.
        foreach ($classes as $class) {
            if (preg_match($pattern, $class) !== 1) {
                continue;
            }
           array_push($classesToWrite ,$class);
        }
        $this->writeFile($classesToWrite);

        return 0;
    }

    /**
     * Create a js file from the constants in the provided class.
     *
     * @param array $class
     * @throws \ReflectionException
     */
    protected function writeFile(array $classes)
    {
        $enumStrings = [];
        foreach ($classes as $class) {
            $outputPath = $class;
            foreach (config('laravel-enum-js.output_transform') as $pattern => $replacement) {
                $baseName = preg_replace('/' . preg_quote($pattern) . '/', $replacement, $outputPath);
            }
            $reflection = new \ReflectionClass($class);
            $constants = $reflection->getConstants();
            $type = $this->guessType($constants);
            



            $outputString = <<<EOT
            /**
             * $class
             * @readonly
             * @enum {{$type}}
             */
            const $baseName = {
            
            EOT;
                $description = [];
                foreach ($constants as $key => $value) {
                    if (gettype($value) == gettype(" ") ) {
                        $outputString .= sprintf("    %s : \"%s\",\n", $key, $value);
                    }
                    else {
                        $outputString .= sprintf("    %s : %s,\n", $key, $value);
                    }
                }
                $outputString .= <<<EOT
            } // end $baseName";
            export default $baseName;
            EOT;
            $enumDescription = "";
            try {
            foreach ($class::getInstances() as $key => $value) {
                dump($value->description );
            }
            $enumDescription = <<<EOT
            export Description {
            };
            EOT;
            }
            catch (Exception $e) {
                dump($e);
            }

            
            $enumStrings = $outputString;
            $output = <<<EOT
            // This file is auto-generated by the command "php artisan enum-js:generate"
            $enumStrings
            $enumDescreption
            EOT;
            // $outputPath = 'enums.js';
            $outputPath = $baseName . '.js';
            Storage::disk(config('laravel-enum-js.output_disk'))->put($outputPath, $output);
            
            $this->info(sprintf('File written to: %s', $outputPath));
        }
    }

    /**
     * 
     */
    private function guessType(array $constants) {
        $type = gettype(reset($constants));
        foreach ($constants as $key => $value) {
            $old_type = $type;
            $type = gettype($value);
            if ($old_type != $type) {
                return "any";
            }
        }
        switch ($type) {
            case "boolean": 
                return $type;
            case "string":
                  return $type;                
            case "integer":
                return "Number";
            case "unknown type":
            default:
                return "any";
            
        }
    }
}
